import streamlit as st
import sqlglot
import networkx as nx

# Set the title and favicon that appear in the Browser's tab bar.
st.set_page_config(
    page_title='sqlglot Abstract Syntax Tree (AST) Viewer',
    page_icon=':database:',
)

# -----------------------------------------------------------------------------
# Declare some useful functions.

# -----------------------------------------------------------------------------
# Draw the actual page

# Set the title that appears at the top of the page.
'''
# :deciduous_tree: sqlglot Abstract Syntax Tree (AST) Viewer

View the abstract syntax tree generated by sqlglot for SQL code.
'''

# Add some spacing
''
''

sql = st.text_area('Input SQL code here:')

''
''
''

parsed_sql = sqlglot.parse(sql)


def ast_to_digraph(ast):
    """
    Convert a SQLGlot AST into a NetworkX DiGraph.
    Args:
        ast (sqlglot.Expression): The root of the SQLGlot AST.
    Returns:
        nx.DiGraph: A directed graph representing the AST.
    """
    graph = nx.DiGraph()
    def add_node_and_edges(node, parent=None):
        """
        Recursively add nodes and edges to the graph based on the AST.
        Args:
            node (sqlglot.Expression): The current AST node.
            parent (str): The label of the parent node, if any.
        """
        # Create a unique identifier for each node using its type and id
        node_id = id(node)
        node_label = f"{node.__class__.__name__}_{node_id}"
        # Add the node to the graph with its label
        graph.add_node(node_id, label=node_label)
        # If there is a parent node, add an edge from parent to current node
        if parent is not None:
            graph.add_edge(parent, node_id)
        
        # Recursively process child nodes
        for child in node.args.values():
            if isinstance(child, list):
                for sub_child in child:
                    if isinstance(sub_child, sqlglot.Expression):
                        add_node_and_edges(sub_child, node_id)
            elif isinstance(child, sqlglot.Expression):
                add_node_and_edges(child, node_id)
    
    # Start traversal from the root of the AST
    add_node_and_edges(ast)
    
    return graph

def graph_to_dot(graph, filename="graph.dot"):
    """
    Convert a NetworkX DiGraph into a DOT diagram and save it to a file.

    Args:
        graph (nx.DiGraph): The directed graph to convert.
        filename (str): The name of the file to save the DOT diagram.
    """
    # Convert the NetworkX graph to a PyDot graph
    pydot_graph = nx.nx_pydot.to_pydot(graph)

    # Save the PyDot graph to a DOT file
    return pydot_graph.to_string()

def sql_to_dot(sql):
    graph = ast_to_digraph(sql)
    dot = graph_to_dot(graph)
    return dot

graph_plots = [st.graphviz_chart(sql_to_dot(x)) for x in parsed_sql]